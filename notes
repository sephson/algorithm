# ALGORITHMS

Big-O

# Problem solving approach

frequency counters, two pointer problems, divide and conquer

# How to improve?

1. Devise a plan for solving problems
2. Master common problems solving patterns

# Problem solving

1. Understand the problems
2. Explore concrete examples
3. Break it down
4. Solve/Simplify
5. Look back and refactor

# Understand the problem

1. Can I restate the problem in my own words
2. What are the inputs that go into the problem
3. What are the outputs that should come from the solutions to the problem?
4. Can the outputs be the determined from the inputs? In other words, do I have enough information to solve the problem?
5. How should I label the important pieces of data that are a part of the problem?

# Problem Solving Pattern: Sliding Window

This pattern involves creating a window which can either be an array or number from one position to another. Depending on a certain condition, the window either increases or closes (and a new window is created), very useful for keeping track of a subset of data in an array/string

# Max Sub Array

([1, 3, 5, 2, 3, 4], 3)

# Add the first three digits

# Subtract sum from the first digit and add the next digit

# in the case above 1 + 3 + 5 = 9

# subtract 1 and add 2 = which is 3 + 5 + 2 = 10

# 5 + 2 + 3 = 10 . . .and aso on till we get the largest sub array

# Divide and Conquer

This pattern sgnificantly reduces the time complexity. Involves dividing data into smaller chunks and repeating process for small sub data

# Recursion

A process that calls itself

The Call Stack - when a function is called is placed on the top of a call stack. when javascript sees return keyword, the function is removed from the top of the call stack

stack - first in first out

recursive functions invoke the same function with a different input until you reach the base case. The base case is where the recursion stops

# sumRange explanation recursion

function sumRange(num) {
if (num === 1) return 1;
return num + sumRange(num - 1);
}

# Explanation

base case is if num is 1 return 1

sumRange(3)
return 3 + sumRange(3-1)
return 2 + sumRange(2-1)
return 1
3+2+1 = 6

# Common problems with recursion

- Wrong base case
- returning the wrong thing
- stack overflow

# SORTING ALGORITHMS

- Insertion
- Selection
- Bubble
- Merge
- Quick
- Radix

# Bubble Sort

An algorithm where the larger values bubbles to the top one at a time.
[5, 3, 4, 1, 2]

# compare 5 and 3, and swap (lesser number goes left and the bigger goes right)

[3, 5, 4, 1, 2]

# compare 5 and 4

[3, 4, 5, 1, 2]

# compare 5 and 1

[3, 4, 1, 5, 2]

# compare 5 and 2

[3, 4, 1, 2, 5]

# compare 3 and 4, nothing changes

# compare 4 and 1

[3, 1, 4, 2, 5]

# compare 4 and 2

[3, 1, 2, 4, 5]

# compare 3 and 1

[1, 3, 2, 4, 5]

# compare 3 and 2

[1, 2, 3, 4, 5]

# array sorted

# bubble sort pseudocode

- start looping with a variable called i from the end of the array towards the beginning
- start an inner loop with a variable called j from the beginning until i - 1
- if arr[j] is greater than arr[j+1], swap those two values
- return sorted array
